import React, { useState, useRef, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';

const WeatherCard = ({ currentWeather, forecast, location, onLocationChange }) => {
    const [selectedDate, setSelectedDate] = useState('');
    const sliderRef = useRef(null);

    const handleWheel = useCallback((e) => {
        e.preventDefault();
        if (sliderRef.current) {
            // Ïä§ÌÅ¨Î°§ Í∞êÎèÑ Ï¶ùÍ∞Ä (Í∏∞Î≥∏Í∞íÏùò 5Î∞∞)
            const scrollAmount = e.deltaY * 7;
            
            // Ïπ¥Îìú ÎÑàÎπÑ(200px)Î•º Í∏∞Ï§ÄÏúºÎ°ú Ïä§ÌÅ¨Î°§ Ïä§ÎÉÖ
            const cardWidth = 215; // Ïπ¥Îìú ÎÑàÎπÑ(200px) + gap(15px)
            const currentScroll = sliderRef.current.scrollLeft;
            
            if (Math.abs(e.deltaY) > 0) {
                // Ïä§ÌÅ¨Î°§ Î∞©Ìñ•Ïóê Îî∞Îùº Îã§Ïùå/Ïù¥Ï†Ñ Ïπ¥ÎìúÎ°ú Ïä§ÌÅ¨Î°§
                if (e.deltaY > 0) {
                    // ÏïÑÎûòÎ°ú Ïä§ÌÅ¨Î°§: Îã§Ïùå Ïπ¥ÎìúÎ°ú
                    sliderRef.current.scrollTo({
                        left: Math.ceil((currentScroll + scrollAmount) / cardWidth) * cardWidth,
                        behavior: 'smooth'
                    });
                } else {
                    // ÏúÑÎ°ú Ïä§ÌÅ¨Î°§: Ïù¥Ï†Ñ Ïπ¥ÎìúÎ°ú
                    sliderRef.current.scrollTo({
                        left: Math.floor((currentScroll + scrollAmount) / cardWidth) * cardWidth,
                        behavior: 'smooth'
                    });
                }
            }
        }
    }, []);

    // Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨ Ï∂îÍ∞Ä
    const handleButtonClick = useCallback((direction) => {
        if (sliderRef.current) {
            const cardWidth = 215; // Ïπ¥Îìú ÎÑàÎπÑ(200px) + gap(15px)
            const currentScroll = sliderRef.current.scrollLeft;

            // Ìïú Ïπ¥ÎìúÏî© Ïù¥Îèô
            const newScroll = direction === 'next' 
                ? currentScroll + cardWidth 
                : currentScroll - cardWidth;

            sliderRef.current.scrollTo({
                left: newScroll,
                behavior: 'smooth'
            });

            // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ ÏùºÏãúÏ†ÅÏúºÎ°ú ÎπÑÌôúÏÑ±Ìôî
            if (sliderRef.current) {
                sliderRef.current.removeEventListener('wheel', handleWheel);
                setTimeout(() => {
                    sliderRef.current?.addEventListener('wheel', handleWheel, { passive: false });
                }, 800); // Ïä§ÌÅ¨Î°§ Ïï†ÎãàÎ©îÏù¥ÏÖòÏù¥ ÎÅùÎÇòÎäî ÏãúÍ∞ÑÍ≥º ÎßûÏ∂§
            }
        }
    }, [handleWheel]);

    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÎßàÏö¥Ìä∏Îê† Îïå Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    useEffect(() => {
        const sliderContainer = sliderRef.current;
        
        if (sliderContainer) {
            sliderContainer.style.overscrollBehavior = 'contain';
            sliderContainer.style.touchAction = 'none';
            sliderContainer.addEventListener('wheel', handleWheel, { passive: false });
        }

        return () => {
            if (sliderContainer) {
                sliderContainer.removeEventListener('wheel', handleWheel);
            }
        };
    }, [handleWheel]);

    const getWeatherDescription = (pty) => {
        switch (pty) {
            case '0': return '‚òÄÔ∏è';
            case '1': return 'üåßÔ∏è';
            case '2': return 'üå®Ô∏è';
            case '3': return '‚ùÑÔ∏è';
            case '4': return 'üå¶Ô∏è';
            default: return 'Ïïå Ïàò ÏóÜÏùå';
        }
    };

    const getTemperatureLevel = (temp) => {
        const temperature = parseInt(temp);
        if (temperature >= 30) return 'very-hot';
        if (temperature >= 25) return 'hot';
        if (temperature >= 20) return 'warm';
        if (temperature >= 15) return 'mild';
        if (temperature >= 10) return 'cool';
        if (temperature >= 5) return 'cold';
        return 'very-cold';
    };

    const getWeatherClass = (pty, temp) => {
        const tempLevel = getTemperatureLevel(temp);
        const baseWeather = pty || '0';
        
        switch (baseWeather) {
            case '0': // ÎßëÏùå
                return `weather-sunny weather-sunny-${tempLevel}`;
            case '1': // ÎπÑ
                return `weather-rainy weather-rainy-${tempLevel}`;
            case '2': // ÏßÑÎààÍπ®ÎπÑ
                return `weather-sleet weather-sleet-${tempLevel}`;
            case '3': // Îàà
                return `weather-snowy weather-snowy-${tempLevel}`;
            case '4': // ÏÜåÎÇòÍ∏∞
                return `weather-shower weather-shower-${tempLevel}`;
            default:
                return `weather-unknown weather-unknown-${tempLevel}`;
        }
    };

    const formatDate = (date) => {
        const year = parseInt(date.substring(0, 4));
        const month = parseInt(date.substring(4, 6));
        const day = parseInt(date.substring(6, 8));
        
        const dateObj = new Date(year, month - 1, day);
        const weekdays = ['ÏùºÏöîÏùº', 'ÏõîÏöîÏùº', 'ÌôîÏöîÏùº', 'ÏàòÏöîÏùº', 'Î™©ÏöîÏùº', 'Í∏àÏöîÏùº', 'ÌÜ†ÏöîÏùº'];
        const weekday = weekdays[dateObj.getDay()];
        
        return `${month}Ïõî ${day}Ïùº (${weekday})`;
    };

    const formatTime = (time) => {
        const hour = parseInt(time.substring(0, 2));
        return `${hour}:00`;
    };

    const getCityName = (coords) => {
        const cityMap = {
            '60,127': 'ÏÑúÏö∏',
            '55,124': 'Ïù∏Ï≤ú',
            '60,121': 'ÏàòÏõê',
            '73,134': 'Ï∂òÏ≤ú',
            '92,131': 'Í∞ïÎ¶â',
            '69,106': 'Ï≤≠Ï£º',
            '67,100': 'ÎåÄÏ†Ñ',
            '66,103': 'ÏÑ∏Ï¢Ö',
            '63,89': 'Ï†ÑÏ£º',
            '58,74': 'Í¥ëÏ£º',
            '89,90': 'ÎåÄÍµ¨',
            '98,76': 'Î∂ÄÏÇ∞',
            '102,84': 'Ïö∏ÏÇ∞',
            '91,77': 'Ï∞ΩÏõê',
            '52,38': 'Ï†úÏ£º'
        };
        return cityMap[coords] || 'Ïïå Ïàò ÏóÜÏùå';
    };

    // ÏòàÎ≥¥ Îç∞Ïù¥ÌÑ∞Î•º ÎÇ†ÏßúÎ≥ÑÎ°ú Í∑∏Î£πÌôî
    const groupedForecast = forecast ? groupForecastByDate(forecast) : {};
    const availableDates = Object.keys(groupedForecast).sort();

    // Ï≤´ Î≤àÏß∏ ÎÇ†ÏßúÎ•º Í∏∞Î≥∏ ÏÑ†ÌÉù
    const currentSelectedDate = selectedDate || availableDates[0] || '';
    
    // ÏÑ†ÌÉùÎêú ÎÇ†ÏßúÏùò ÏãúÍ∞ÑÎ≥Ñ Îç∞Ïù¥ÌÑ∞
    const selectedDateData = currentSelectedDate ? groupedForecast[currentSelectedDate] : [];
    const timeGroupedData = selectedDateData.length > 0 ? groupForecastByDateTime(selectedDateData) : {};
    const sortedTimes = Object.keys(timeGroupedData).sort();

    // ÎÇ†ÏßúÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå Ï¥àÍ∏∞Ìôî
    const handleDateChange = (newDate) => {
        setSelectedDate(newDate);
    };

    return (
        <div className="weather-layout">
            {/* ÏôºÏ™Ω Ï†àÎ∞ò: ÎèÑÏãú ÏÑ†ÌÉù + ÌòÑÏû¨ ÎÇ†Ïî® */}
            <div className="weather-left-section">
                <div className="current-weather-card">
                    <select 
                        value={location} 
                        onChange={onLocationChange}
                        className="city-select"
                    >
                        <option value="60,127">ÏÑúÏö∏</option>
                        <option value="55,124">Ïù∏Ï≤ú</option>
                        <option value="60,121">ÏàòÏõê</option>
                        <option value="73,134">Ï∂òÏ≤ú</option>
                        <option value="92,131">Í∞ïÎ¶â</option>
                        <option value="69,106">Ï≤≠Ï£º</option>
                        <option value="67,100">ÎåÄÏ†Ñ</option>
                        <option value="66,103">ÏÑ∏Ï¢Ö</option>
                        <option value="63,89">Ï†ÑÏ£º</option>
                        <option value="58,74">Í¥ëÏ£º</option>
                        <option value="89,90">ÎåÄÍµ¨</option>
                        <option value="98,76">Î∂ÄÏÇ∞</option>
                        <option value="102,84">Ïö∏ÏÇ∞</option>
                        <option value="91,77">Ï∞ΩÏõê</option>
                        <option value="52,38">Ï†úÏ£º</option>
                    </select>

                    {currentWeather && (
                        <div className="current-weather-content">
                            <h2 className="city-title">{getCityName(location)}</h2>
                            <div className="current-weather-main">
                                <div className="temperature">
                                    {currentWeather.find(item => item.category === 'T1H')?.obsrValue}¬∞C
                                </div>
                                <div className="weather-icon">
                                    {getWeatherDescription(currentWeather.find(item => item.category === 'PTY')?.obsrValue)}
                                </div>
                            </div>
                            <div className="weather-details">
                                <div className="detail-item">
                                    <span className="detail-label">ÏäµÎèÑ</span>
                                    <span className="detail-value">{currentWeather.find(item => item.category === 'REH')?.obsrValue}%</span>
                                </div>
                                <div className="detail-item">
                                    <span className="detail-label">ÌíçÏÜç</span>
                                    <span className="detail-value">{currentWeather.find(item => item.category === 'WSD')?.obsrValue}m/s</span>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>

            {/* Ïò§Î•∏Ï™Ω Ï†àÎ∞ò: ÏòàÎ≥¥ */}
            <div className="weather-right-section">
                {forecast && availableDates.length > 0 && (
                    <div className="forecast-card">
                        <h3 className="forecast-title">ÏãúÍ∞ÑÎ≥Ñ ÏòàÎ≥¥</h3>
                        
                        {/* ÎÇ†Ïßú ÏÑ†ÌÉù */}
                        <select 
                            value={currentSelectedDate} 
                            onChange={(e) => handleDateChange(e.target.value)}
                            className="date-select"
                        >
                            {availableDates.map(date => (
                                <option key={date} value={date}>
                                    {formatDate(date)}
                                </option>
                            ))}
                        </select>

                        {/* ÏãúÍ∞ÑÎ≥Ñ ÏòàÎ≥¥ Ïª®ÌÖåÏù¥ÎÑà */}
                        <div className="forecast-section">
                            <div 
                                ref={sliderRef}
                                className="forecast-slider-container"
                            >
                                <div className="forecast-slider">
                                    {sortedTimes.map((time) => {
                                        const timeData = timeGroupedData[time];
                                        const temp = timeData.find(item => item.category === 'TMP')?.fcstValue;
                                        const pty = timeData.find(item => item.category === 'PTY')?.fcstValue;
                                        const reh = timeData.find(item => item.category === 'REH')?.fcstValue;
                                        const wsd = timeData.find(item => item.category === 'WSD')?.fcstValue;

                                        return (
                                            <div 
                                                key={time}
                                                className={`forecast-time-card ${getWeatherClass(pty, temp)}`}
                                            >
                                                <div className="forecast-time">{formatTime(time)}</div>
                                                <div className="forecast-weather-icon">
                                                    {getWeatherDescription(pty)}
                                                </div>
                                                <div className="forecast-temperature">
                                                    {temp}¬∞C
                                                </div>
                                                <div className="forecast-details-mini">
                                                    <div className="mini-detail">
                                                        <span>üíß {reh}%</span>
                                                    </div>
                                                    <div className="mini-detail">
                                                        <span>üí® {wsd}m/s</span>
                                                    </div>
                                                </div>
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>
                            <div className="forecast-nav-buttons">
                                <button 
                                    className="nav-button prev"
                                    onClick={() => handleButtonClick('prev')}
                                >
                                    ‚óÄ
                                </button>
                                <button 
                                    className="nav-button next"
                                    onClick={() => handleButtonClick('next')}
                                >
                                    ‚ñ∂
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

const groupForecastByDate = (forecast) => {
    return forecast.reduce((acc, item) => {
        if (!acc[item.fcstDate]) {
            acc[item.fcstDate] = [];
        }
        acc[item.fcstDate].push(item);
        return acc;
    }, {});
};

const groupForecastByDateTime = (forecast) => {
    return forecast.reduce((acc, item) => {
        const key = item.fcstTime;
        if (!acc[key]) {
            acc[key] = [];
        }
        acc[key].push(item);
        return acc;
    }, {});
};

WeatherCard.propTypes = {
    currentWeather: PropTypes.array,
    forecast: PropTypes.array,
    location: PropTypes.string.isRequired,
    onLocationChange: PropTypes.func.isRequired
};

export default WeatherCard;












// const fetchWeatherData = async () => {
        //     try {
        //         const [currentResponse, forecastResponse] = await Promise.all([
        //             axios.get(`/api/weather/current?location=${location}`),
        //             axios.get(`/api/weather/forecast?location=${location}`)
        //         ]);

            //     setCurrentWeather(currentResponse.data);
                
            //     // Filter forecast data for future times only
            //     const now = new Date();
            //     const currentDate = now.getFullYear() + 
            //         String(now.getMonth() + 1).padStart(2, '0') + 
            //         String(now.getDate()).padStart(2, '0');
            //     const currentTime = String(now.getHours()).padStart(2, '0') + '00';

            //     const filteredForecast = forecastResponse.data.filter(item => {
            //         if (item.fcstDate > currentDate) return true;
            //         return item.fcstDate === currentDate && item.fcstTime > currentTime;
            //     });

            //     setForecast(filteredForecast);
            // } catch (error) {
            //     console.error('Error fetching weather data:', error);
            // }
        // };
        // fetchWeatherData();